import{s as e}from"./chunk-SKB7J2MH-DZjRRXoE.js";import{_ as t,D as a,E as l,H as s,d as r,l as n,ac as o,b as i,a as c,o as d,p,g as h,s as m,F as y,ad as f,x as u}from"./mermaid-core-DcoXc7nO.js";import{p as S}from"./chunk-353BL4L5-Dm1nH-E5.js";import{p as g}from"./treemap-75Q7IDZK-etMX5uG5.js";import{H as x,x as b,I as C,J as v,u as $}from"./d3-charts-C9eKmPJg.js";import"./react-vendor-DQmNySUk.js";import"./_baseUniq-C7aGhXhy.js";import"./_basePickBy-kmImDU3P.js";import"./clone-CQY9yKjB.js";var w=class{constructor(){this.nodes=[],this.levels=new Map,this.outerNodes=[],this.classes=new Map,this.setAccTitle=i,this.getAccTitle=c,this.setDiagramTitle=d,this.getDiagramTitle=p,this.getAccDescription=h,this.setAccDescription=m}static{t(this,"TreeMapDB")}getNodes(){return this.nodes}getConfig(){const e=y,t=l();return a({...e.treemap,...t.treemap??{}})}addNode(e,t){this.nodes.push(e),this.levels.set(e,t),0===t&&(this.outerNodes.push(e),this.root??=e)}getRoot(){return{name:"",children:this.outerNodes}}addClass(e,t){const a=this.classes.get(e)??{id:e,styles:[],textStyles:[]},l=t.replace(/\\,/g,"§§§").replace(/,/g,";").replace(/§§§/g,",").split(";");l&&l.forEach(e=>{f(e)&&(a?.textStyles?a.textStyles.push(e):a.textStyles=[e]),a?.styles?a.styles.push(e):a.styles=[e]}),this.classes.set(e,a)}getClasses(){return this.classes}getStylesForClass(e){return this.classes.get(e)?.styles??[]}clear(){u(),this.nodes=[],this.levels=new Map,this.outerNodes=[],this.classes=new Map,this.root=void 0}};function L(e){if(!e.length)return[];const t=[],a=[];return e.forEach(e=>{const l={name:e.name,children:"Leaf"===e.type?void 0:[]};for(l.classSelector=e?.classSelector,e?.cssCompiledStyles&&(l.cssCompiledStyles=[e.cssCompiledStyles]),"Leaf"===e.type&&void 0!==e.value&&(l.value=e.value);a.length>0&&a[a.length-1].level>=e.level;)a.pop();if(0===a.length)t.push(l);else{const e=a[a.length-1].node;e.children?e.children.push(l):e.children=[l]}"Leaf"!==e.type&&a.push({node:l,level:e.level})}),t}t(L,"buildHierarchy");var k=t((e,a)=>{S(e,a);const l=[];for(const t of e.TreemapRows??[])"ClassDefStatement"===t.$type&&a.addClass(t.className??"",t.styleText??"");for(const t of e.TreemapRows??[]){const e=t.item;if(!e)continue;const s=t.indent?parseInt(t.indent):0,r=M(e),n=e.classSelector?a.getStylesForClass(e.classSelector):[],o=n.length>0?n.join(";"):void 0,i={level:s,name:r,type:e.$type,value:e.value,classSelector:e.classSelector,cssCompiledStyles:o};l.push(i)}const s=L(l),r=t((e,t)=>{for(const l of e)a.addNode(l,t),l.children&&l.children.length>0&&r(l.children,t+1)},"addNodesRecursively");r(s,0)},"populate"),M=t(e=>e.name?String(e.name):"","getItemName"),T={parser:{yy:void 0},parse:t(async e=>{try{const t=g,a=await t("treemap",e);n.debug("Treemap AST:",a);const l=T.parser?.yy;if(!(l instanceof w))throw new Error("parser.parser?.yy was not a TreemapDB. This is due to a bug within Mermaid, please report this issue at https://github.com/mermaid-js/mermaid/issues.");k(a,l)}catch(t){throw n.error("Error parsing treemap:",t),t}},"parse")},z={draw:t((a,i,c,d)=>{const p=d.db,h=p.getConfig(),m=h.padding??10,y=p.getDiagramTitle(),f=p.getRoot(),{themeVariables:u}=l();if(!f)return;const S=y?30:0,g=s(i),w=h.nodeWidth?10*h.nodeWidth:960,L=h.nodeHeight?10*h.nodeHeight:500,k=w,M=L+S;let T;g.attr("viewBox",`0 0 ${k} ${M}`),r(g,M,k,h.useMaxWidth);try{const e=h.valueFormat||",";if("$0,0"===e)T=t(e=>"$"+x(",")(e),"valueFormat");else if(e.startsWith("$")&&e.includes(",")){const a=/\.\d+/.exec(e),l=a?a[0]:"";T=t(e=>"$"+x(","+l)(e),"valueFormat")}else if(e.startsWith("$")){const a=e.substring(1);T=t(e=>"$"+x(a||"")(e),"valueFormat")}else T=x(e)}catch(E){n.error("Error creating format function:",E),T=x(",")}const z=b().range(["transparent",u.cScale0,u.cScale1,u.cScale2,u.cScale3,u.cScale4,u.cScale5,u.cScale6,u.cScale7,u.cScale8,u.cScale9,u.cScale10,u.cScale11]),F=b().range(["transparent",u.cScalePeer0,u.cScalePeer1,u.cScalePeer2,u.cScalePeer3,u.cScalePeer4,u.cScalePeer5,u.cScalePeer6,u.cScalePeer7,u.cScalePeer8,u.cScalePeer9,u.cScalePeer10,u.cScalePeer11]),P=b().range([u.cScaleLabel0,u.cScaleLabel1,u.cScaleLabel2,u.cScaleLabel3,u.cScaleLabel4,u.cScaleLabel5,u.cScaleLabel6,u.cScaleLabel7,u.cScaleLabel8,u.cScaleLabel9,u.cScaleLabel10,u.cScaleLabel11]);y&&g.append("text").attr("x",k/2).attr("y",S/2).attr("class","treemapTitle").attr("text-anchor","middle").attr("dominant-baseline","middle").text(y);const N=g.append("g").attr("transform",`translate(0, ${S})`).attr("class","treemapContainer"),j=C(f).sum(e=>e.value??0).sort((e,t)=>(t.value??0)-(e.value??0)),D=v().size([w,L]).paddingTop(e=>e.children&&e.children.length>0?35:0).paddingInner(m).paddingLeft(e=>e.children&&e.children.length>0?10:0).paddingRight(e=>e.children&&e.children.length>0?10:0).paddingBottom(e=>e.children&&e.children.length>0?10:0).round(!0)(j),W=D.descendants().filter(e=>e.children&&e.children.length>0),A=N.selectAll(".treemapSection").data(W).enter().append("g").attr("class","treemapSection").attr("transform",e=>`translate(${e.x0},${e.y0})`);A.append("rect").attr("width",e=>e.x1-e.x0).attr("height",25).attr("class","treemapSectionHeader").attr("fill","none").attr("fill-opacity",.6).attr("stroke-width",.6).attr("style",e=>0===e.depth?"display: none;":""),A.append("clipPath").attr("id",(e,t)=>`clip-section-${i}-${t}`).append("rect").attr("width",e=>Math.max(0,e.x1-e.x0-12)).attr("height",25),A.append("rect").attr("width",e=>e.x1-e.x0).attr("height",e=>e.y1-e.y0).attr("class",(e,t)=>`treemapSection section${t}`).attr("fill",e=>z(e.data.name)).attr("fill-opacity",.6).attr("stroke",e=>F(e.data.name)).attr("stroke-width",2).attr("stroke-opacity",.4).attr("style",e=>{if(0===e.depth)return"display: none;";const t=o({cssCompiledStyles:e.data.cssCompiledStyles});return t.nodeStyles+";"+t.borderStyles.join(";")}),A.append("text").attr("class","treemapSectionLabel").attr("x",6).attr("y",12.5).attr("dominant-baseline","middle").text(e=>0===e.depth?"":e.data.name).attr("font-weight","bold").attr("style",e=>0===e.depth?"display: none;":"dominant-baseline: middle; font-size: 12px; fill:"+P(e.data.name)+"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;"+o({cssCompiledStyles:e.data.cssCompiledStyles}).labelStyles.replace("color:","fill:")).each(function(e){if(0===e.depth)return;const t=$(this),a=e.data.name;t.text(a);const l=e.x1-e.x0;let s;s=!1!==h.showValues&&e.value?l-10-30-10-6:l-6-6;const r=Math.max(15,s),n=t.node();if(n.getComputedTextLength()>r){const e="...";let l=a;for(;l.length>0;){if(l=a.substring(0,l.length-1),0===l.length){t.text(e),n.getComputedTextLength()>r&&t.text("");break}if(t.text(l+e),n.getComputedTextLength()<=r)break}}}),!1!==h.showValues&&A.append("text").attr("class","treemapSectionValue").attr("x",e=>e.x1-e.x0-10).attr("y",12.5).attr("text-anchor","end").attr("dominant-baseline","middle").text(e=>e.value?T(e.value):"").attr("font-style","italic").attr("style",e=>0===e.depth?"display: none;":"text-anchor: end; dominant-baseline: middle; font-size: 10px; fill:"+P(e.data.name)+"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;"+o({cssCompiledStyles:e.data.cssCompiledStyles}).labelStyles.replace("color:","fill:"));const B=D.leaves(),H=N.selectAll(".treemapLeafGroup").data(B).enter().append("g").attr("class",(e,t)=>`treemapNode treemapLeafGroup leaf${t}${e.data.classSelector?` ${e.data.classSelector}`:""}x`).attr("transform",e=>`translate(${e.x0},${e.y0})`);H.append("rect").attr("width",e=>e.x1-e.x0).attr("height",e=>e.y1-e.y0).attr("class","treemapLeaf").attr("fill",e=>e.parent?z(e.parent.data.name):z(e.data.name)).attr("style",e=>o({cssCompiledStyles:e.data.cssCompiledStyles}).nodeStyles).attr("fill-opacity",.3).attr("stroke",e=>e.parent?z(e.parent.data.name):z(e.data.name)).attr("stroke-width",3),H.append("clipPath").attr("id",(e,t)=>`clip-${i}-${t}`).append("rect").attr("width",e=>Math.max(0,e.x1-e.x0-4)).attr("height",e=>Math.max(0,e.y1-e.y0-4)),H.append("text").attr("class","treemapLabel").attr("x",e=>(e.x1-e.x0)/2).attr("y",e=>(e.y1-e.y0)/2).attr("style",e=>"text-anchor: middle; dominant-baseline: middle; font-size: 38px;fill:"+P(e.data.name)+";"+o({cssCompiledStyles:e.data.cssCompiledStyles}).labelStyles.replace("color:","fill:")).attr("clip-path",(e,t)=>`url(#clip-${i}-${t})`).text(e=>e.data.name).each(function(e){const t=$(this),a=e.x1-e.x0,l=e.y1-e.y0,s=t.node(),r=a-8,n=l-8;if(r<10||n<10)return void t.style("display","none");let o=parseInt(t.style("font-size"),10);for(;s.getComputedTextLength()>r&&o>8;)o--,t.style("font-size",`${o}px`);let i=Math.max(6,Math.min(28,Math.round(.6*o))),c=o+2+i;for(;c>n&&o>8&&(o--,i=Math.max(6,Math.min(28,Math.round(.6*o))),!(i<6&&8===o));)t.style("font-size",`${o}px`),c=o+2+i;t.style("font-size",`${o}px`),(s.getComputedTextLength()>r||o<8||n<o)&&t.style("display","none")}),!1!==h.showValues&&H.append("text").attr("class","treemapValue").attr("x",e=>(e.x1-e.x0)/2).attr("y",function(e){return(e.y1-e.y0)/2}).attr("style",e=>"text-anchor: middle; dominant-baseline: hanging; font-size: 28px;fill:"+P(e.data.name)+";"+o({cssCompiledStyles:e.data.cssCompiledStyles}).labelStyles.replace("color:","fill:")).attr("clip-path",(e,t)=>`url(#clip-${i}-${t})`).text(e=>e.value?T(e.value):"").each(function(e){const t=$(this),a=this.parentNode;if(!a)return void t.style("display","none");const l=$(a).select(".treemapLabel");if(l.empty()||"none"===l.style("display"))return void t.style("display","none");const s=parseFloat(l.style("font-size")),r=Math.max(6,Math.min(28,Math.round(.6*s)));t.style("font-size",`${r}px`);const n=(e.y1-e.y0)/2+s/2+2;t.attr("y",n);const o=e.x1-e.x0,i=e.y1-e.y0-4,c=o-8;t.node().getComputedTextLength()>c||n+r>i||r<6?t.style("display","none"):t.style("display",null)});const V=h.diagramPadding??8;e(g,V,"flowchart",h?.useMaxWidth||!1)},"draw"),getClasses:t(function(e,t){return t.db.getClasses()},"getClasses")},F={sectionStrokeColor:"black",sectionStrokeWidth:"1",sectionFillColor:"#efefef",leafStrokeColor:"black",leafStrokeWidth:"1",leafFillColor:"#efefef",labelColor:"black",labelFontSize:"12px",valueFontSize:"10px",valueColor:"black",titleColor:"black",titleFontSize:"14px"},P=t(({treemap:e}={})=>{const t=a(F,e);return`\n  .treemapNode.section {\n    stroke: ${t.sectionStrokeColor};\n    stroke-width: ${t.sectionStrokeWidth};\n    fill: ${t.sectionFillColor};\n  }\n  .treemapNode.leaf {\n    stroke: ${t.leafStrokeColor};\n    stroke-width: ${t.leafStrokeWidth};\n    fill: ${t.leafFillColor};\n  }\n  .treemapLabel {\n    fill: ${t.labelColor};\n    font-size: ${t.labelFontSize};\n  }\n  .treemapValue {\n    fill: ${t.valueColor};\n    font-size: ${t.valueFontSize};\n  }\n  .treemapTitle {\n    fill: ${t.titleColor};\n    font-size: ${t.titleFontSize};\n  }\n  `},"getStyles"),N={parser:T,get db(){return new w},renderer:z,styles:P};export{N as diagram};
