import{s as e}from"./chunk-SKB7J2MH-CJyoVMhn.js";import{a as t,s as a,g as l,q as s,p as r,b as n,c as o,E as c,F as i,I as d,e as p,l as h,ad as m,ae as y,y as f,G as S}from"./mermaid-core-CxzdCigi.js";import{p as g}from"./chunk-353BL4L5-CbfpvhZL.js";import{I as u}from"./chunk-AACKK3MU-Dd0ya460.js";import{p as x}from"./treemap-6Y5VK53G-zDneqk0b.js";import{H as C,x as b,I as v,J as $,u as w}from"./d3-charts-C9eKmPJg.js";import"./react-vendor-DQmNySUk.js";import"./_baseUniq-jCaBlI5l.js";import"./_basePickBy-BhhVUbw9.js";import"./clone-D_1IP6a6.js";var L={nodes:[],levels:new Map,outerNodes:[],classes:new Map},k=new u(()=>structuredClone(L)),z=t(()=>{const e=S,t=i();return c({...e.treemap,...t.treemap??{}})},"getConfig"),F=t(()=>k.records.nodes,"getNodes"),M=t((e,t)=>{const a=k.records;a.nodes.push(e),a.levels.set(e,t),0===t&&a.outerNodes.push(e),0!==t||a.root||(a.root=e)},"addNode"),T=t(()=>({name:"",children:k.records.outerNodes}),"getRoot"),P=t((e,t)=>{const a=k.records.classes,l=a.get(e)??{id:e,styles:[],textStyles:[]};a.set(e,l);const s=t.replace(/\\,/g,"§§§").replace(/,/g,";").replace(/§§§/g,",").split(";");s&&s.forEach(e=>{y(e)&&(l?.textStyles?l.textStyles.push(e):l.textStyles=[e]),l?.styles?l.styles.push(e):l.styles=[e]}),a.set(e,l)},"addClass"),N=t(()=>k.records.classes,"getClasses"),j=t(e=>k.records.classes.get(e)?.styles??[],"getStylesForClass"),W={getNodes:F,addNode:M,getRoot:T,getConfig:z,clear:t(()=>{f(),k.reset()},"clear"),setAccTitle:o,getAccTitle:n,setDiagramTitle:r,getDiagramTitle:s,getAccDescription:l,setAccDescription:a,addClass:P,getClasses:N,getStylesForClass:j};function A(e){if(!e.length)return[];const t=[],a=[];return e.forEach(e=>{const l={name:e.name,children:"Leaf"===e.type?void 0:[]};for(l.classSelector=e?.classSelector,e?.cssCompiledStyles&&(l.cssCompiledStyles=[e.cssCompiledStyles]),"Leaf"===e.type&&void 0!==e.value&&(l.value=e.value);a.length>0&&a[a.length-1].level>=e.level;)a.pop();if(0===a.length)t.push(l);else{const e=a[a.length-1].node;e.children?e.children.push(l):e.children=[l]}"Leaf"!==e.type&&a.push({node:l,level:e.level})}),t}t(A,"buildHierarchy");var V=t(e=>{g(e,W);const a=[];for(const t of e.TreemapRows??[])"ClassDefStatement"===t.$type&&W.addClass(t.className??"",t.styleText??"");for(const t of e.TreemapRows??[]){const e=t.item;if(!e)continue;const l=t.indent?parseInt(t.indent):0,s=I(e),r=e.classSelector?W.getStylesForClass(e.classSelector):[],n=r.length>0?r.join(";"):void 0,o={level:l,name:s,type:e.$type,value:e.value,classSelector:e.classSelector,cssCompiledStyles:n};a.push(o)}const l=A(a),s=t((e,t)=>{for(const a of e)W.addNode(a,t),a.children&&a.children.length>0&&s(a.children,t+1)},"addNodesRecursively");s(l,0)},"populate"),I=t(e=>e.name?String(e.name):"","getItemName"),R={sectionStrokeColor:"black",sectionStrokeWidth:"1",sectionFillColor:"#efefef",leafStrokeColor:"black",leafStrokeWidth:"1",leafFillColor:"#efefef",labelColor:"black",labelFontSize:"12px",valueFontSize:"10px",valueColor:"black",titleColor:"black",titleFontSize:"14px"},D={parser:{parse:t(async e=>{try{const t=x,a=await t("treemap",e);h.debug("Treemap AST:",a),V(a)}catch(t){throw h.error("Error parsing treemap:",t),t}},"parse")},db:W,renderer:{draw:t((a,l,s,r)=>{const n=r.db,o=n.getConfig(),c=o.padding??10,y=n.getDiagramTitle(),f=n.getRoot(),{themeVariables:S}=i();if(!f)return;const g=y?30:0,u=d(l),x=o.nodeWidth?10*o.nodeWidth:960,L=o.nodeHeight?10*o.nodeHeight:500,k=x,z=L+g;let F;u.attr("viewBox",`0 0 ${k} ${z}`),p(u,z,k,o.useMaxWidth);try{const e=o.valueFormat||",";if("$0,0"===e)F=t(e=>"$"+C(",")(e),"valueFormat");else if(e.startsWith("$")&&e.includes(",")){const a=/\.\d+/.exec(e),l=a?a[0]:"";F=t(e=>"$"+C(","+l)(e),"valueFormat")}else if(e.startsWith("$")){const a=e.substring(1);F=t(e=>"$"+C(a||"")(e),"valueFormat")}else F=C(e)}catch(H){h.error("Error creating format function:",H),F=C(",")}const M=b().range(["transparent",S.cScale0,S.cScale1,S.cScale2,S.cScale3,S.cScale4,S.cScale5,S.cScale6,S.cScale7,S.cScale8,S.cScale9,S.cScale10,S.cScale11]),T=b().range(["transparent",S.cScalePeer0,S.cScalePeer1,S.cScalePeer2,S.cScalePeer3,S.cScalePeer4,S.cScalePeer5,S.cScalePeer6,S.cScalePeer7,S.cScalePeer8,S.cScalePeer9,S.cScalePeer10,S.cScalePeer11]),P=b().range([S.cScaleLabel0,S.cScaleLabel1,S.cScaleLabel2,S.cScaleLabel3,S.cScaleLabel4,S.cScaleLabel5,S.cScaleLabel6,S.cScaleLabel7,S.cScaleLabel8,S.cScaleLabel9,S.cScaleLabel10,S.cScaleLabel11]);y&&u.append("text").attr("x",k/2).attr("y",g/2).attr("class","treemapTitle").attr("text-anchor","middle").attr("dominant-baseline","middle").text(y);const N=u.append("g").attr("transform",`translate(0, ${g})`).attr("class","treemapContainer"),j=v(f).sum(e=>e.value??0).sort((e,t)=>(t.value??0)-(e.value??0)),W=$().size([x,L]).paddingTop(e=>e.children&&e.children.length>0?35:0).paddingInner(c).paddingLeft(e=>e.children&&e.children.length>0?10:0).paddingRight(e=>e.children&&e.children.length>0?10:0).paddingBottom(e=>e.children&&e.children.length>0?10:0).round(!0)(j),A=W.descendants().filter(e=>e.children&&e.children.length>0),V=N.selectAll(".treemapSection").data(A).enter().append("g").attr("class","treemapSection").attr("transform",e=>`translate(${e.x0},${e.y0})`);V.append("rect").attr("width",e=>e.x1-e.x0).attr("height",25).attr("class","treemapSectionHeader").attr("fill","none").attr("fill-opacity",.6).attr("stroke-width",.6).attr("style",e=>0===e.depth?"display: none;":""),V.append("clipPath").attr("id",(e,t)=>`clip-section-${l}-${t}`).append("rect").attr("width",e=>Math.max(0,e.x1-e.x0-12)).attr("height",25),V.append("rect").attr("width",e=>e.x1-e.x0).attr("height",e=>e.y1-e.y0).attr("class",(e,t)=>`treemapSection section${t}`).attr("fill",e=>M(e.data.name)).attr("fill-opacity",.6).attr("stroke",e=>T(e.data.name)).attr("stroke-width",2).attr("stroke-opacity",.4).attr("style",e=>{if(0===e.depth)return"display: none;";const t=m({cssCompiledStyles:e.data.cssCompiledStyles});return t.nodeStyles+";"+t.borderStyles.join(";")}),V.append("text").attr("class","treemapSectionLabel").attr("x",6).attr("y",12.5).attr("dominant-baseline","middle").text(e=>0===e.depth?"":e.data.name).attr("font-weight","bold").attr("style",e=>0===e.depth?"display: none;":"dominant-baseline: middle; font-size: 12px; fill:"+P(e.data.name)+"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;"+m({cssCompiledStyles:e.data.cssCompiledStyles}).labelStyles.replace("color:","fill:")).each(function(e){if(0===e.depth)return;const t=w(this),a=e.data.name;t.text(a);const l=e.x1-e.x0;let s;s=!1!==o.showValues&&e.value?l-10-30-10-6:l-6-6;const r=Math.max(15,s),n=t.node();if(n.getComputedTextLength()>r){const e="...";let l=a;for(;l.length>0;){if(l=a.substring(0,l.length-1),0===l.length){t.text(e),n.getComputedTextLength()>r&&t.text("");break}if(t.text(l+e),n.getComputedTextLength()<=r)break}}}),!1!==o.showValues&&V.append("text").attr("class","treemapSectionValue").attr("x",e=>e.x1-e.x0-10).attr("y",12.5).attr("text-anchor","end").attr("dominant-baseline","middle").text(e=>e.value?F(e.value):"").attr("font-style","italic").attr("style",e=>0===e.depth?"display: none;":"text-anchor: end; dominant-baseline: middle; font-size: 10px; fill:"+P(e.data.name)+"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;"+m({cssCompiledStyles:e.data.cssCompiledStyles}).labelStyles.replace("color:","fill:"));const I=W.leaves(),R=N.selectAll(".treemapLeafGroup").data(I).enter().append("g").attr("class",(e,t)=>`treemapNode treemapLeafGroup leaf${t}${e.data.classSelector?` ${e.data.classSelector}`:""}x`).attr("transform",e=>`translate(${e.x0},${e.y0})`);R.append("rect").attr("width",e=>e.x1-e.x0).attr("height",e=>e.y1-e.y0).attr("class","treemapLeaf").attr("fill",e=>e.parent?M(e.parent.data.name):M(e.data.name)).attr("style",e=>m({cssCompiledStyles:e.data.cssCompiledStyles}).nodeStyles).attr("fill-opacity",.3).attr("stroke",e=>e.parent?M(e.parent.data.name):M(e.data.name)).attr("stroke-width",3),R.append("clipPath").attr("id",(e,t)=>`clip-${l}-${t}`).append("rect").attr("width",e=>Math.max(0,e.x1-e.x0-4)).attr("height",e=>Math.max(0,e.y1-e.y0-4)),R.append("text").attr("class","treemapLabel").attr("x",e=>(e.x1-e.x0)/2).attr("y",e=>(e.y1-e.y0)/2).attr("style",e=>"text-anchor: middle; dominant-baseline: middle; font-size: 38px;fill:"+P(e.data.name)+";"+m({cssCompiledStyles:e.data.cssCompiledStyles}).labelStyles.replace("color:","fill:")).attr("clip-path",(e,t)=>`url(#clip-${l}-${t})`).text(e=>e.data.name).each(function(e){const t=w(this),a=e.x1-e.x0,l=e.y1-e.y0,s=t.node(),r=a-8,n=l-8;if(r<10||n<10)return void t.style("display","none");let o=parseInt(t.style("font-size"),10);for(;s.getComputedTextLength()>r&&o>8;)o--,t.style("font-size",`${o}px`);let c=Math.max(6,Math.min(28,Math.round(.6*o))),i=o+2+c;for(;i>n&&o>8&&(o--,c=Math.max(6,Math.min(28,Math.round(.6*o))),!(c<6&&8===o));)t.style("font-size",`${o}px`),i=o+2+c;t.style("font-size",`${o}px`),(s.getComputedTextLength()>r||o<8||n<o)&&t.style("display","none")}),!1!==o.showValues&&R.append("text").attr("class","treemapValue").attr("x",e=>(e.x1-e.x0)/2).attr("y",function(e){return(e.y1-e.y0)/2}).attr("style",e=>"text-anchor: middle; dominant-baseline: hanging; font-size: 28px;fill:"+P(e.data.name)+";"+m({cssCompiledStyles:e.data.cssCompiledStyles}).labelStyles.replace("color:","fill:")).attr("clip-path",(e,t)=>`url(#clip-${l}-${t})`).text(e=>e.value?F(e.value):"").each(function(e){const t=w(this),a=this.parentNode;if(!a)return void t.style("display","none");const l=w(a).select(".treemapLabel");if(l.empty()||"none"===l.style("display"))return void t.style("display","none");const s=parseFloat(l.style("font-size")),r=Math.max(6,Math.min(28,Math.round(.6*s)));t.style("font-size",`${r}px`);const n=(e.y1-e.y0)/2+s/2+2;t.attr("y",n);const o=e.x1-e.x0,c=e.y1-e.y0-4,i=o-8;t.node().getComputedTextLength()>i||n+r>c||r<6?t.style("display","none"):t.style("display",null)});const D=o.diagramPadding??8;e(u,D,"flowchart",o?.useMaxWidth||!1)},"draw"),getClasses:t(function(e,t){return t.db.getClasses()},"getClasses")},styles:t(({treemap:e}={})=>{const t=c(R,e);return`\n  .treemapNode.section {\n    stroke: ${t.sectionStrokeColor};\n    stroke-width: ${t.sectionStrokeWidth};\n    fill: ${t.sectionFillColor};\n  }\n  .treemapNode.leaf {\n    stroke: ${t.leafStrokeColor};\n    stroke-width: ${t.leafStrokeWidth};\n    fill: ${t.leafFillColor};\n  }\n  .treemapLabel {\n    fill: ${t.labelColor};\n    font-size: ${t.labelFontSize};\n  }\n  .treemapValue {\n    fill: ${t.valueColor};\n    font-size: ${t.valueFontSize};\n  }\n  .treemapTitle {\n    fill: ${t.titleColor};\n    font-size: ${t.titleFontSize};\n  }\n  `},"getStyles")};export{D as diagram};
