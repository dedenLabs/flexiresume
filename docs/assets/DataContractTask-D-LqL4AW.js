import{D as n}from"./DataGameProjects-LPunVSLI.js";import{D as t,a as e}from"./DataPersonalInfluence-CQEfseIU.js";const a={personal_strengths:{type:"personal_strengths",name:"个人优势",content:'### 🎮 虚拟社区技术领袖｜🛠️ 资源转换方案专家\n- #### <span style="font-size: 1.8em;">💻 高性能前端架构设计</span>：作为淘米创始团队核心成员，主导《<a href="https://mole.61.com" trget="_blank">摩尔庄园</a>》《<a href="https://s.61.com" targt="_blank">赛尔号H5</a>》等标杆项目技术架构，设计高性能游戏架构，🏗️支持中重度游戏开发与横向扩展，实现同屏千人流畅交互，沉淀出社区类产品工业化开发范式。\n### 💎 资源转换技术攻坚：\n- #### ⚡ <span style="font-size: 1.5em;">Flash遗产焕新专家</span>：研发🔄动画资源智能转换引擎，实现🎨Flash素材95%+无损迁移至HTML5平台，成功复刻🔍《摩尔庄园》经典玩法，节省70%+美术资源重构成本。\n- #### 🌐 <span style="font-size: 1.5em;">跨平台移植方案</span>：建立📦游戏资产自动化转换流水线，支持🖼️Spine动画/🕹️Cocos组件/📡WebGL渲染等技术的无缝衔接，缩短多平台适配周期60%+。\n\n### 🏆 技术顾问服务优势：\n- #### 🧩 <span style="font-size: 1.8em;">全周期解决方案</span>：提供从💻遗留系统评估到🔧架构改造的完整技术路线图，独创🔄「资源-逻辑-表现」三层迁移模型，解决🛡️代码腐化与🌌技术债务难题。\n- #### 📈 <span style="font-size: 1.5em;">成本优化专家</span>：通过🚀自动化测试框架+📊智能回归验证，降低传统迁移方案50%+人力投入，实现💰ROI可量化的技术改造。\n\n'},contract_task:{type:"base",name:"技术顾问服务 / 资源转换服务 / 外包服务",content:'\n> ### 独有的<span style="font-size:1.5em;color:#c00">资源转换</span>与<span style="font-size:1.5em;color:#a00">迁移技术</span>，让<span style="font-size:1.2em;"> HTML5 </span>游戏<span style="font-size:1.5em;color:#0a0"> 开发效率</span>几何倍提升。\n> \n> ---\n> \n> ## 承接（\n> - **原 Flash 经典项目 转 HTML5 项目**（*支持超大型项目，需要提供完整源码和资源。*）\n\n> - **Flash动画转HTML5动画、网页交互动画、广告互动等各类网页交互项目**\n> （*仅提供编程和动画Html5化服务，需要提供美术动画资源与详细需求说明。*）\n\n> - **技术顾问服务 + 外部资源转换服务** \n\n> <p align="center"><img src="images/me.webp" width="40%" /></p>\n\n> ## ）服务\n\n'},personal_influence:{type:"base",name:"个人影响力 与 行业认可",content:e},html5_game_bottleneck:{type:"timeline",name:"HTML5游戏行业瓶颈 与 解决方案",categories:[{name:"HTML5游戏行业瓶颈",content:"\n> 由于以上限制，需表现力丰富的情况下行业大多采用最简陋的**逐帧动画**方案，这不仅会导致**高内存消耗**，还会影响**画质**，形成较大的技术门槛。\n>\n",children:[{name:"HTML5行业动画资源没有专业深度优化的解决方案",content:"\n- 动画表现力方向非常薄弱，需要做以下几个方面的平衡工作： **画质**、**动画流畅度**、**网络加载**、**体验优化**、**性能**等。\n"},{name:"关于画质和流畅度",content:"\n- **画质和流畅度方面**的优化空间可能有限。常规采用了大量序列图，这导致了资源量非常大，直接影响了加载体验并增加了性能和内存开销。\n- 如果为了**提升性能**而减少序列帧数，那么**画面流畅度**将会大幅下降，造成画面体验变差。\n"},{name:"关于动画资源",content:"\n- 目前H5行业的**动画资源制作**仍处于非常原始的阶段，主要采用**逐帧动画**或**骨骼动画**。\n"}]},{name:"解决方案",content:"\n> 这里以腾讯《洛克王国Flash页游版》的宠物素材 来举例\n>\n",children:[{name:"逐帧动画",content:"",children:[{name:"以腾讯《洛克王国Flash页游版》的宠物素材来举例👇",content:"\n> ![alt text](images/game/h5/pet-6.webp)\n> ![alt text](images/game/h5/pet-5.webp)\n> 上图为洛克王国页游版的宠物精灵（非骨骼动画）编号为`1076`，帧数量`398`帧，最小尺寸`428*314`:\n> **单张图**压缩后约`90kb`，可得出以下结论:\n>  \n> \n> **宠物包含以下动作组:**\n> - IDLE: `50`帧\n> - STB: `25`帧\n> - BTS: `25`帧\n> - APPEAR: `19`帧\n> - ATTACK: `60`帧\n> - UNDER_ATTACK: `4`帧\n> - BEAT_DOWN: `65`帧\n> - MISS: `63`帧\n> - MAGIC_START: `28`帧\n> - MAGIC_FOCUS: `21`帧\n> - MAGIC_END: `11`帧\n> - DEAD: `27`帧\n>\n> 方案对比👇\n"},{name:"未优化👿 - 体积76M-内存408M-不支持特效",content:'\n> **保证画质和画面流畅度:**\n> \n> - **总帧数：** 398帧 = `50+25+25+19+60+4+65+63+28+21+11+27`\n> \n> - **体积：** <span style="font-size:2rem;color:#c00">76.416MB</span> = `96kb × 398 × 2(两只不同的精灵对战)`\n> \n> - **内存：** <span style="font-size:2rem;color:#c00">408MB</span> = `428(长) × 314(高) × 4(像素字节) × 398(总数) /1024(字节) /1024(字节) × 2(两只不同的精灵对战)`\n> \n> - **特效：** 不支持通道和滤镜。\n> \n> - **体验：** 内存大、加载慢、位图多解码导致卡顿。\n'},{name:"常规优化",content:"",children:[{name:"砍帧方案😟 - 体积19M-内存102M-不支持特效",content:' \n>  \n> - **总帧数：** 约100帧 =398帧/4\n> \n> - **体积：** <span style="font-size:2rem;color:#c00">约19MB</span> = 76.416MB/4\n> \n> - **内存：** <span style="font-size:2rem;color:#c00">约102MB</span> = 408MB/4\n> \n> - **特效：** 不支持通道和滤镜。\n> \n> - **体验：** 依然是内存大、加载慢、位图多解码导致卡顿且**降低流畅度**，画面会有跳帧的感觉。\n'},{name:"缩小尺寸方案😟 - 体积?M-内存?M-不支持特效-降低清晰度",content:" \n> *还有缩小尺寸降低内存消耗和资源体积大小，画面会变模糊。*\n"}]},{name:"资源转换服务 - ⚡高清、流畅、无砍帧",content:"",children:[{name:"纯矢量图方案🙂",content:' \n> > ## 体积(<span style="font-size:2rem;color:#0c0">490KB</span> = 245KB × 2)-内存小于 <span style="font-size:1.5rem;color:#Ac0">490KB*10</span>-支持特效\n> > 无画质和画面流畅度问题，仅需考虑性能优化方案\n> > \n> > **总帧数：** 398帧\n> > \n> > **体积：** 矢量图版**490KB** (490KB = 245KB × 2)\n> > \n> > **内存：** 为动画配置解码后数据体积:\n> > \n> > ``` js\n> > 490KB > 实际体积 < 490KB × 10\n> > ```\n> > **特效：** 支持通道和滤镜。\n> > \n> > **体验：** 内存极小、加载极快、无卡顿，需考虑低端机渲染性能。\n> > \n    '},{name:"纯位图方案🙂",content:'\n> > ## 体积(<span style="font-size:2rem;color:#0c0">596KB</span> = 298KB × 2)-小于13MB-支持特效\n> > 无画质流畅度问题，需考虑画质和内存优化方案\n> > \n> > **总帧数：** $398帧$\n> > \n> > **体积：** 位图版**596KB** (596KB = 298KB(配置文件 + 位图体积) × 2)\n> > \n> > **内存：** \n> > ``` js\n> > 13MB(可与矢量图结合降低内存) = \n> > (\n> >   (1024(长) × 1024(高) × 4(像素字节)\n> >                 + \n> >   (628(长) × 1024(高) × 4(像素字节)\n> > )   ×    2(两只不同的精灵对战)\n> > ```\n> > **特效：** 支持通道和滤镜。\n> > \n> > **体验：** 内存偏大、加载快、无卡顿，需考虑内存。\n> > \n> > **输出：** 图1:<img loading="lazy" src="images/game/h5/pet-bitmap1.webp" style="width:100px"/>图2:<img loading="lazy" src="images/game/h5/pet-bitmap2.webp" style="height:100px"/>\n> >\n    '},{name:"矢量图和位图结合😃",content:"\n> **最佳方案：** 根据实际情况来设置局部位图或局部矢量图，并得到最佳资源文件。\n> 能、体积、内存、体验各方面数值在纯矢量版和纯位图版之间。\n    "}]},{name:"资源优化方案对比📖 - 百倍提升",content:'\n> > *加载体积降低了 <span style="font-size:2rem;color:#0c0">**155倍**</span> \n内存降低了 <span style="font-size:2rem;color:#0c0">**81倍-800倍**</span> \n,纯位图版降低 <span style="font-size:1.5rem">**31倍**</span> \n图片解码消耗降低了 <span style="font-size:1.5rem">**n倍到30倍+**</span>。 \n不仅仅只是**性能和体验**的提升，开发工程师与美术之间的**协作工作流**也大幅度提升，\n<span style="font-size:1.5rem;color:#0cc">无法估量</span>。*\n \n        ',children:[{name:"常规方案",content:' \n> <table  style="background-color:#fff0f0">\n>     <thead>\n>         <tr>\n>             <th><strong>优化方案</strong></th>\n>             <th><strong>总帧数</strong></th>\n>             <th><strong>体积</strong></th>\n>             <th><strong>内存</strong></th>\n>             <th><strong>特效</strong></th>\n>             <th><strong>体验</strong></th>\n>         </tr>\n>     </thead>\n>     <tbody>\n>         <tr>\n>             <td><strong>未优化 - 保证画质</strong></td>\n>             <td>398帧</td>\n>             <td><strong><span style="font-size:1.2em;color:#a00">76MB</span></strong></td>\n>             <td><strong><span style="font-size:1.2em;color:#f00">408MB</span></strong> = 428(长) × 314(高) × 4(字节) × 398(帧数) / 1024 / 1024 × 2 (两只精灵)</td>\n>             <td>不支持通道和滤镜</td>\n>             <td>内存大、加载慢、位图解码卡顿</td>\n>         </tr>\n>         <tr>\n>             <td><strong>砍帧方案 - 降低流畅度</strong></td>\n>             <td>100帧(<strong>砍帧</strong>)</td>\n>             <td><strong><span style="font-size:1.2em;color:#a00">19MB</span></strong></td>\n>             <td><strong><span style="font-size:1.2em;color:#f00">102MB</span></strong> = 408MB / 4</td>\n>             <td>不支持通道和滤镜</td>\n>             <td>内存大、加载慢、位图解码卡顿</td>\n>         </tr>\n>     </tbody>\n> </table>\n'},{name:"超级优化方案",content:' \n>  ---\n>  <strong>资源转换服务-解决方案-<span style="font-size:1.5em;color:#a0a">高清流畅无砍帧</span>👇</strong>\n>  ---\n>  \n>  <table  style="background-color:#f0fff0">\n>      <thead>\n>          <tr>\n>              <th><strong>优化方案</strong></th>\n>              <th><strong>总帧数</strong></th>\n>              <th><strong>体积</strong></th>\n>              <th><strong>内存</strong></th>\n>              <th><strong>特效</strong></th>\n>              <th><strong>体验</strong></th>\n>          </tr>\n>      </thead>\n>      <tbody> \n>          <tr>\n>              <td><strong>矢量图方案</strong></td>\n>              <td>398帧</td>\n>              <td><span style="font-size:1.2em;color:#0a0"><strong>490KB</strong></span></td>\n>              <td>大于<strong><span style="font-size:1.2em;color:#aa0">490KB</span></strong>小于<span style="font-size:1.2em;color:#aa0"><strong>490KB × 10</strong></span></td>\n>              <td>支持通道和滤镜</td>\n>              <td>内存极小、加载极快、性能一般，需考虑低端机渲染性能</td>\n>          </tr>\n>          <tr>\n>              <td><strong>位图方案</strong></td>\n>              <td>398帧</td>\n>              <td><strong><span style="font-size:1.2em;color:#0a0">596KB</span></strong></td>\n>              <td><span style="font-size:1.2em;color:#aa0"><strong>13MB</strong></span>(可与矢量图结合降低内存) = (1024 × 1024 × 4 + 628 × 1024 × 4) × 2 (两只精灵)</td>\n>              <td>支持通道和滤镜</td>\n>              <td>内存偏大、加载快、无卡顿性能极高，需考虑内存优化</td>\n>          </tr>\n>          <tr>\n>              <td><strong><span style="font-size:1.2em;color:#000">最佳方案</span><br/>(矢量/位图结合)</strong></td>\n>              <td>398帧</td>\n>              <td>两则之间</td>\n>              <td>两则之间</td>\n>              <td>支持通道和滤镜</td>\n>              <td>内存中等、加载快、无卡顿，性能高</td>\n>          </tr>\n>      </tbody>\n>  </table>\n                '}]}]}]}]},tech_consulting:{type:"timeline",name:"技术顾问服务 + 外部资源转换服务",content:"",categories:[{name:"服务亮点",content:"\n>   通过资源转换服务，官方团队可以专注于**核心逻辑开发**，简化开发过程。\n                ",children:[{name:"降低开发复杂度",content:"\n>   通过资源转换服务，官方团队可以专注于**核心逻辑开发**，简化开发过程。\n                        "},{name:"成本效率提升",content:"\n>   资源转换服务减少了开发冗余，显著提升了项目的**性能**。\n                        "},{name:"团队效率提升",content:"\n>   采用类似**Flash资源管理模式**的开发方式，结合高效的团队协作，相比传统HTML5游戏开发方式，**效率提升5倍-50倍+**，同时**资源品质得到质的提升**。\n                        "},{name:"品牌与性能兼顾",content:"\n>   结合现有风格与现代化优化，保证了游戏的**品牌一致性**和**性能表现**。\n                        "},{name:"资源转换服务特性",content:'\n> 完美还原 Flash 制作的 **原始效果**，支持**通道**和**滤镜**，元件**矢量图**和**位图**方案策略**灵活**切换。\n>  ![alt text](images/game/h5/pet-2.webp)\n>  上图中使用了**模糊**、**发光**、**调整颜色**滤镜和**通道**。\n> \n>  <img loading="lazy" src="images/game/h5/pet-3.webp" style="width:200px"/>左图使用了**高级色彩效果**。\n> \n>  **HTML5真实效果视频:**\n> \n>  <video loading="lazy" controls src="images/game/h5/pet.mp4"></video>\n>  \n> **输出:**   纯矢量数据**245k**，可矢量图和位图结合来**平衡性能和画质**。\n>  \n>  注：宠物部分矢量数据丢失是因为素材是SWF文件反编译的资源，不是原始源文件，图形完整性有缺陷。\n>  \n                        '}]},{name:"适用场景",content:"\n- 希望快速完成技术转型。  \n- 希望降低外包开发成本，同时保持对项目的完全控制权。  \n- 有完整的开发团队，但缺乏现代化架构经验和资源转换能力。  \n                "},{name:"服务内容",content:"",children:[{name:"长期独立技术顾问服务",content:"\n> 通过长期技术顾问服务，官方团队能够专注于核心业务开发，同时借助外部专业支持高效完成技术升级，降低技术风险和开发成本。",children:[{name:"技术难点快速解决",content:"\n- 提供专业指导，帮助团队高效解决项目中遇到的技术难题，如性能优化、架构设计、Bug 修复等，避免团队陷入试错和效率低下的状态。\n- 针对具体需求制定优化方案（如内存优化、FPS 提升、资源加载优化等）。\n                                "},{name:"成本效率提升",content:"\n>   资源转换服务减少开发冗余，提高项目性能。\n                                "},{name:"架构设计与改进",content:"\n- 根据项目需求设计现代化技术架构（如模块化架构、动态加载方案），帮助团队搭建高效、可扩展的项目框架。\n- 定期优化项目架构，降低技术债务，确保长期可维护性和高性能。\n                                "},{name:"团队技能提升",content:"\n- 通过定制化培训（如 Canvas 和 WebGL 性能调优、网络加载优化等），帮助团队快速掌握新技术。\n- 提供技术文档和实践案例支持，减少学习曲线带来的效率损失。 \n                                "},{name:"项目效率提升",content:"\n- 提供工具链支持和脚手架设计，减少开发中的重复性工作（如自动化部署、资源转换工具）。\n- 协助设计测试环境，提升团队开发和调试效率。\n                                "},{name:"成本控制",content:"\n- 减少外部资源投入，通过高效的架构和技术支持降低开发成本。\n- 避免项目因技术问题反复修改和延期上线。\n                                "},{name:"前瞻性指导",content:"\n- 提供行业趋势和技术演进方向的建议（如采用渐进式 Web 应用技术、跨平台兼容性优化）。\n- 确保项目架构在技术更新中具有长期竞争力。\n                                "},{name:"支持多项目并行开发",content:"\n- 为同时进行多个项目的团队提供统一的技术架构，减少跨项目的技术冲突和资源浪费。\n- 提供增量式开发支持，帮助团队在版本迭代中平滑过渡。\n                                "}]},{name:"资源转换服务",content:"\n> **资源转换服务是 H5 化的重要核心模块之一**，它直接影响游戏性能、内存占用以及加载速度。官方团队应充分利用外包技术服务，将资源优化与开发并行进行，以确保 H5 化的平稳过渡与性能提升。",children:[{name:"资源转换服务的重要性",content:"\n1. **资源元件优化**：将 Flash 动画的多个分散元件合并为单一元件，减少渲染节点，从而提升渲染效率。  \n2. **矢量图与位图的平衡**：\n   - 矢量适合缩放需求较大的资源（如地图元素）。  \n   - 位图更适合固定尺寸的高复杂度资源（如背景图）。  \n3. **资源压缩与分组**：对动画帧、图片序列等资源进行组别压缩，减少加载时间；合理分组资源以便动态加载，降低内存占用峰值。  \n4. **动画尺寸缩放**：避免超高分辨率资源占用过多内存。  \n                                "},{name:"性能与内存优化的直接影响",content:"\n> 资源转换影响帧率（FPS）、加载时间和内存使用：  \n>  - **不优化的资源**：可能导致帧率下降、动画卡顿，增加用户流失率。  \n>  - **优化后的资源**：通过高效加载和低内存占用提升用户体验。  \n                                "},{name:"生成规范化资源类名",content:'\n> 提升开发效率，官方团队可快速调用资源：  \n>   ```\n>   var mv = new res.daTing.Cls_mc_guoChangDongHua();  // 自动提示\n>   mv.play(); // 播放动画\n>   this.stage.addChild(mv); // 显示动画\n>   ```  \n>   \n>   ```  \n>   /* Flash 动画资源资源类名管理示例: \n>   * 文件名："大厅.swf"\n>   * 动画元件名：过场动画\n>   * \n>   * 如果文件名和资源链接名都是英文将会直接输出英文类名\n>   * 资源生成的文件为 d.ts 文件，仅用于提升编写代码效率，不会编译为 JavaScript 实体文件。\n>   */\n>   ```\n>   此机制便于官方开发团队高效调试和维护资源。  \n                                '},{name:"结构与样式还原",content:"\n> 保持 ActionScrip3 代码风格 和 Flash 的资源结构，保证兼容性 和 原有工作栈，Flash 技术栈可快速适应 H5 开发环境。  \n                                "}]}]}]},resource_conversion_demo:{type:"timeline",name:"资源转换DEMO",categories:[{name:"示例1 - 特效动画",content:'\n > <img loading="lazy" src="images/game/h5/yuan.gif" style="width:150px"/>这是一个旋转的动画，\n **输出:** <img loading="lazy" src="images/game/h5/image-9.webp" style="width:100px"/> \n >\n > 上图的动画实际资源只有箭头和一个圆圈的资源量，而未使用特殊技术处理的序列图，将输出几十张不一样的序列图，这种方式严重消耗内存也增加了CPU解码负担（主要体现画面卡顿不流畅）。\n >\n > \n                '},{name:"示例2 - 骨骼动画",content:'\n > <img loading="lazy" src="images/game/h5/seer.gif" style="width:100px"/>这是一个角色骨架动画，**输出:** <img loading="lazy" src="images/game/h5/image-10.webp" style="width:200px"/>\n > \n > 资源为重复利用，这里角色使用率非常高，为了性能每种颜色单独输出一个小图，如果存储为了体积压缩时，可以只骨架灰色图，通过代码改变颜色，甚至直接使用矢量数据，无位图资源。\n >\n > 装扮也相同原理\n > <img loading="lazy" src="images/game/h5/cloth.gif" style="width:100px"/>**输出:** 头:![alt text](images/game/h5/image_1-2.webp) 手:![alt text](images/game/h5/image_1-3.webp) 脚:![alt text](images/game/h5/image_1-4.webp) 翅膀:![alt text](images/game/h5/image_1-5.webp)\n \n > \n                '},{name:"示例3 - 交互动画",content:'\n> <video loading="lazy" controls src="images/game/h5/cartoon.mp4"></video>  \n> 该视频是在**H5效果**动画基础上录制的，动画中的所有元件和过程都可以通过程序进行交互操作。  \n>  \n> 录制后，使用H264编码的MP4文件体积为**3.29MB**，而实际游戏中该动画资源的体积仅为**625KB**，压缩比约为**526%**，并且在压缩过程中仍有进一步优化空间。该优化大幅提升了性能和流畅度。  \n>  \n> 在游戏中，动画仅由2张静态图和一个动画信息文件组成，资源消耗大大降低。  \n>  \n> 然而，视频并不能完全替代动画资源，因为视频无法控制内部的子动画和事件交互，同时也无法支持透明背景。\n> \n> 整个动画输出只有**2**张位图资源:\n>\n> **输出:** 图1<img loading="lazy" src="images/game/h5/cartoon_1.webp" style="width:100px"/> 图2<img loading="lazy" src="images/game/h5/cartoon_2.webp" style="width:100px"/>\n'},{name:"示例4 - UI界面",content:"\n> ![alt text](images/game/h5/image-13.webp)\n>  **输出:** ![alt text](images/game/h5/image_1.webp)\n>  **代码:**\n>```\n>  export class Toolbar extends res.ui.toolbar.Cls_spr_toolbar/*转换的UI资源*/ implements IToolbar/*UI模块暴露的接口*/ {\n>    // 添加到舞台\n>    private onAddedToStage(): void {\n>        // 好友按钮\n>        BC.addEvent(this, this.btn_HaoYou, TouchEvent.TOUCH_TAP, () => {\n>          ModuleManager.open({ id: xls.ModuleConst.FRIEND_PANEL }); //打开好友面板\n>          playClickSound(); //播放音效\n>        });\n>    }\n>    private playClickSound () {\n>        SoundManager.ins().play(xls.sound.getItem(xls.SoundConst.CLICK));\n>    }\n> \n>    ...\n> \n>     // 销毁\n>     public destroy(): void { \n>         BC.removeEvent(this); \n>     }\n>   }\n>```\n"},{name:"示例5 - 超宽场景，解决图像超出设备兼容尺寸",content:'\n> ![alt text](images/game/h5/image-14.webp)\n>  **输出:**  \n>  图1<img loading="lazy" src="images/game/h5/image_1-1.webp" style="width:100px"/>\n图2<img loading="lazy" src="images/game/h5/image_2.webp" style="width:100px"/>\n图3<img loading="lazy" src="images/game/h5/image_3.webp" style="width:100px"/>\n图4<img loading="lazy" src="images/game/h5/image_4.webp" style="height:100px"/> \n> \n'},{name:"例子6 - Flash项目资源转H5-《洛克王国》页游 - 场景",content:'\n> ![alt text](images/game/h5/image.webp) \n> **HTML5真实效果:**\n> <video loading="lazy" controls src="images/game/h5/roco_scene.mp4"></video>\n> **输出:**   \n>\n> <img loading="lazy" src="images/game/h5/image-1.webp" style="width:50%"/> \n> \n> 这张图是场景的所有位图资源\n'}],content:""},contract_task_projects:{type:"timeline",name:"经典案例",categories:[{name:"社区养成类",children:[{name:"赛尔号H5（2015年、支持多端发布、技术含量最高）",content:' \n> 这款游戏是我**使用技术含量最高**的项目，涉及了**多端发布、后端服务器、CI/CD、多端打包、资源管理、热编译、EUI 配置界面生成、反射技术、硬链接技术、性能、CDN策略、资源防劫持、Android和iOs资源增量热更**等。\n\n> 值得一提的是，该游戏上线到现在近10年，Html5发展到如今很多**新技术已经成熟**，该游戏从**画质到流畅度**还有非常大的提升空间。\n\n> ![图片](images/game/4/1.webp)  \n> *基于 Egret 引擎开发。\n开发这款游戏前我**已经拥有4款社区架构经验**（抱抱城前身、抱抱城、摩尔庄园1、摩尔庄园2），在此再度升级架构细节，为了支持超大型社区项目，我独立设计并实现了一整套类似 Webpack 的工具链，针对性地优化了项目的构建和资源管理。*\n> ![图片](images/game/4/2.webp)  \n> *在开发中，我采用了反射技术动态生成 EUI 配置界面，从而减少了配置文件的体积并提升了性能。\n此外，整个项目支持热编译，极大提高了开发效率。*\n> ![图片](images/game/4/3.webp)   \n> *在项目架构设计方面，我将每个模块的资源、UI 源文件、发布资源和文档进行了严格的分离存储，并通过硬链接技术将相关资源关联到对应模块，进一步提升了工作流程效率。\n该项目涉及到**多端打包**、**后端服务器**、**CI/CD**，综合考虑了前端、后端和运维的协同工作，以确保系统的高效运行和易于维护。*\n\n<p align="center"> !QRCode:https://s.61.com size=200 </p> \n <p align="center"> \n   <a href="https://s.61.com/" target="_blank">扫码体验 https://s.61.com/</a>\n </p>\n'}],content:""}]},personal_projects:{type:"timeline",name:"虚拟社区/游戏 作品",categories:n},open_source_projects:{type:"project_experience",name:"开源项目",list:t}};export{a as default};
