import{p as t}from"./chunk-353BL4L5-CueAzyqx.js";import{I as r}from"./chunk-AACKK3MU-DQ0u3K5Y.js";import{a as e,q as o,p as n,s as a,g as s,b as c,c as i,l as h,d,u as m,D as $,y as l,k as y,E as g,F as p,G as x,H as f}from"./mermaid-core-BSOLjsMK.js";import{p as u}from"./treemap-75Q7IDZK-B6lTo5q-.js";import{u as b}from"./d3-charts-C9eKmPJg.js";import"./react-vendor-DQmNySUk.js";import"./_baseUniq-B5TLY_Z3.js";import"./_basePickBy-Dh5tva4c.js";import"./clone-l_WaHhFS.js";var w={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},B=x.gitGraph,E=e(()=>g({...B,...p().gitGraph}),"getConfig"),k=new r(()=>{const t=E(),r=t.mainBranchName,e=t.mainBranchOrder;return{mainBranchName:r,commits:new Map,head:null,branchConfig:new Map([[r,{name:r,order:e}]]),branches:new Map([[r,null]]),currBranch:r,direction:"LR",seq:0,options:{}}});function C(){return f({length:7})}function L(t,r){const e=Object.create(null);return t.reduce((t,o)=>{const n=r(o);return e[n]||(e[n]=!0,t.push(o)),t},[])}e(C,"getID"),e(L,"uniqBy");var T=e(function(t){k.records.direction=t},"setDirection"),M=e(function(t){h.debug("options str",t),t=t?.trim(),t=t||"{}";try{k.records.options=JSON.parse(t)}catch(r){h.error("error while parsing gitGraph options",r.message)}},"setOptions"),v=e(function(){return k.records.options},"getOptions"),P=e(function(t){let r=t.msg,e=t.id;const o=t.type;let n=t.tags;h.info("commit",r,e,o,n),h.debug("Entering commit:",r,e,o,n);const a=E();e=y.sanitizeText(e,a),r=y.sanitizeText(r,a),n=n?.map(t=>y.sanitizeText(t,a));const s={id:e||k.records.seq+"-"+C(),message:r,seq:k.records.seq++,type:o??w.NORMAL,tags:n??[],parents:null==k.records.head?[]:[k.records.head.id],branch:k.records.currBranch};k.records.head=s,h.info("main branch",a.mainBranchName),k.records.commits.has(s.id)&&h.warn(`Commit ID ${s.id} already exists`),k.records.commits.set(s.id,s),k.records.branches.set(k.records.currBranch,s.id),h.debug("in pushCommit "+s.id)},"commit"),R=e(function(t){let r=t.name;const e=t.order;if(r=y.sanitizeText(r,E()),k.records.branches.has(r))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${r}")`);k.records.branches.set(r,null!=k.records.head?k.records.head.id:null),k.records.branchConfig.set(r,{name:r,order:e}),G(r),h.debug("in createBranch")},"branch"),I=e(t=>{let r=t.branch,e=t.id;const o=t.type,n=t.tags,a=E();r=y.sanitizeText(r,a),e&&(e=y.sanitizeText(e,a));const s=k.records.branches.get(k.records.currBranch),c=k.records.branches.get(r),i=s?k.records.commits.get(s):void 0,d=c?k.records.commits.get(c):void 0;if(i&&d&&i.branch===r)throw new Error(`Cannot merge branch '${r}' into itself.`);if(k.records.currBranch===r){const t=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},t}if(void 0===i||!i){const t=new Error(`Incorrect usage of "merge". Current branch (${k.records.currBranch})has no commits`);throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["commit"]},t}if(!k.records.branches.has(r)){const t=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") does not exist");throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:[`branch ${r}`]},t}if(void 0===d||!d){const t=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") has no commits");throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:['"commit"']},t}if(i===d){const t=new Error('Incorrect usage of "merge". Both branches have same head');throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},t}if(e&&k.records.commits.has(e)){const t=new Error('Incorrect usage of "merge". Commit with id:'+e+" already exists, use different custom id");throw t.hash={text:`merge ${r} ${e} ${o} ${n?.join(" ")}`,token:`merge ${r} ${e} ${o} ${n?.join(" ")}`,expected:[`merge ${r} ${e}_UNIQUE ${o} ${n?.join(" ")}`]},t}const m=c||"",$={id:e||`${k.records.seq}-${C()}`,message:`merged branch ${r} into ${k.records.currBranch}`,seq:k.records.seq++,parents:null==k.records.head?[]:[k.records.head.id,m],branch:k.records.currBranch,type:w.MERGE,customType:o,customId:!!e,tags:n??[]};k.records.head=$,k.records.commits.set($.id,$),k.records.branches.set(k.records.currBranch,$.id),h.debug(k.records.branches),h.debug("in mergeBranch")},"merge"),A=e(function(t){let r=t.id,e=t.targetId,o=t.tags,n=t.parent;h.debug("Entering cherryPick:",r,e,o);const a=E();if(r=y.sanitizeText(r,a),e=y.sanitizeText(e,a),o=o?.map(t=>y.sanitizeText(t,a)),n=y.sanitizeText(n,a),!r||!k.records.commits.has(r)){const t=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const s=k.records.commits.get(r);if(void 0===s||!s)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(n&&(!Array.isArray(s.parents)||!s.parents.includes(n)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");const c=s.branch;if(s.type===w.MERGE&&!n)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!e||!k.records.commits.has(e)){if(c===k.records.currBranch){const t=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const t=k.records.branches.get(k.records.currBranch);if(void 0===t||!t){const t=new Error(`Incorrect usage of "cherry-pick". Current branch (${k.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const a=k.records.commits.get(t);if(void 0===a||!a){const t=new Error(`Incorrect usage of "cherry-pick". Current branch (${k.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const i={id:k.records.seq+"-"+C(),message:`cherry-picked ${s?.message} into ${k.records.currBranch}`,seq:k.records.seq++,parents:null==k.records.head?[]:[k.records.head.id,s.id],branch:k.records.currBranch,type:w.CHERRY_PICK,tags:o?o.filter(Boolean):[`cherry-pick:${s.id}${s.type===w.MERGE?`|parent:${n}`:""}`]};k.records.head=i,k.records.commits.set(i.id,i),k.records.branches.set(k.records.currBranch,i.id),h.debug(k.records.branches),h.debug("in cherryPick")}},"cherryPick"),G=e(function(t){if(t=y.sanitizeText(t,E()),!k.records.branches.has(t)){const r=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);throw r.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]},r}{k.records.currBranch=t;const r=k.records.branches.get(k.records.currBranch);k.records.head=void 0!==r&&r?k.records.commits.get(r)??null:null}},"checkout");function O(t,r,e){const o=t.indexOf(r);-1===o?t.push(e):t.splice(o,1,e)}function q(t){const r=t.reduce((t,r)=>t.seq>r.seq?t:r,t[0]);let e="";t.forEach(function(t){e+=t===r?"\t*":"\t|"});const o=[e,r.id,r.seq];for(const n in k.records.branches)k.records.branches.get(n)===r.id&&o.push(n);if(h.debug(o.join(" ")),r.parents&&2==r.parents.length&&r.parents[0]&&r.parents[1]){const e=k.records.commits.get(r.parents[0]);O(t,r,e),r.parents[1]&&t.push(k.records.commits.get(r.parents[1]))}else{if(0==r.parents.length)return;if(r.parents[0]){const e=k.records.commits.get(r.parents[0]);O(t,r,e)}}q(t=L(t,t=>t.id))}e(O,"upsert"),e(q,"prettyPrintCommitHistory");var H=e(function(){h.debug(k.records.commits),q([N()[0]])},"prettyPrint"),z=e(function(){k.reset(),l()},"clear"),j=e(function(){return[...k.records.branchConfig.values()].map((t,r)=>null!==t.order&&void 0!==t.order?t:{...t,order:parseFloat(`0.${r}`)}).sort((t,r)=>(t.order??0)-(r.order??0)).map(({name:t})=>({name:t}))},"getBranchesAsObjArray"),D=e(function(){return k.records.branches},"getBranches"),S=e(function(){return k.records.commits},"getCommits"),N=e(function(){const t=[...k.records.commits.values()];return t.forEach(function(t){h.debug(t.id)}),t.sort((t,r)=>t.seq-r.seq),t},"getCommitsArray"),W={commitType:w,getConfig:E,setDirection:T,setOptions:M,getOptions:v,commit:P,branch:R,merge:I,cherryPick:A,checkout:G,prettyPrint:H,clear:z,getBranchesAsObjArray:j,getBranches:D,getCommits:S,getCommitsArray:N,getCurrentBranch:e(function(){return k.records.currBranch},"getCurrentBranch"),getDirection:e(function(){return k.records.direction},"getDirection"),getHead:e(function(){return k.records.head},"getHead"),setAccTitle:i,getAccTitle:c,getAccDescription:s,setAccDescription:a,setDiagramTitle:n,getDiagramTitle:o},K=e((r,e)=>{t(r,e),r.dir&&e.setDirection(r.dir);for(const t of r.statements)_(t,e)},"populate"),_=e((t,r)=>{const o={Commit:e(t=>r.commit(F(t)),"Commit"),Branch:e(t=>r.branch(U(t)),"Branch"),Merge:e(t=>r.merge(Y(t)),"Merge"),Checkout:e(t=>r.checkout(V(t)),"Checkout"),CherryPicking:e(t=>r.cherryPick(Q(t)),"CherryPicking")}[t.$type];o?o(t):h.error(`Unknown statement type: ${t.$type}`)},"parseStatement"),F=e(t=>({id:t.id,msg:t.message??"",type:void 0!==t.type?w[t.type]:w.NORMAL,tags:t.tags??void 0}),"parseCommit"),U=e(t=>({name:t.name,order:t.order??0}),"parseBranch"),Y=e(t=>({branch:t.branch,id:t.id??"",type:void 0!==t.type?w[t.type]:void 0,tags:t.tags??void 0}),"parseMerge"),V=e(t=>t.branch,"parseCheckout"),Q=e(t=>({id:t.id,targetId:"",tags:0===t.tags?.length?void 0:t.tags,parent:t.parent}),"parseCherryPicking"),X={parse:e(async t=>{const r=await u("gitGraph",t);h.debug(r),K(r,W)},"parse")},J=d(),Z=J?.gitGraph,tt=10,rt=40,et=new Map,ot=new Map,nt=new Map,at=[],st=0,ct="LR",it=e(()=>{et.clear(),ot.clear(),nt.clear(),st=0,at=[],ct="LR"},"clear"),ht=e(t=>{const r=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"==typeof t?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach(t=>{const e=document.createElementNS("http://www.w3.org/2000/svg","tspan");e.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),e.setAttribute("dy","1em"),e.setAttribute("x","0"),e.setAttribute("class","row"),e.textContent=t.trim(),r.appendChild(e)}),r},"drawText"),dt=e(t=>{let r,o,n;return"BT"===ct?(o=e((t,r)=>t<=r,"comparisonFunc"),n=1/0):(o=e((t,r)=>t>=r,"comparisonFunc"),n=0),t.forEach(t=>{const e="TB"===ct||"BT"==ct?ot.get(t)?.y:ot.get(t)?.x;void 0!==e&&o(e,n)&&(r=t,n=e)}),r},"findClosestParent"),mt=e(t=>{let r="",e=1/0;return t.forEach(t=>{const o=ot.get(t).y;o<=e&&(r=t,e=o)}),r||void 0},"findClosestParentBT"),$t=e((t,r,e)=>{let o=e,n=e;const a=[];t.forEach(t=>{const e=r.get(t);if(!e)throw new Error(`Commit not found for key ${t}`);e.parents.length?(o=yt(e),n=Math.max(o,n)):a.push(e),gt(e,o)}),o=n,a.forEach(t=>{pt(t,o,e)}),t.forEach(t=>{const e=r.get(t);if(e?.parents.length){const t=mt(e.parents);o=ot.get(t).y-rt,o<=n&&(n=o);const r=et.get(e.branch).pos,a=o-tt;ot.set(e.id,{x:r,y:a})}})},"setParallelBTPos"),lt=e(t=>{const r=dt(t.parents.filter(t=>null!==t));if(!r)throw new Error(`Closest parent not found for commit ${t.id}`);const e=ot.get(r)?.y;if(void 0===e)throw new Error(`Closest parent position not found for commit ${t.id}`);return e},"findClosestParentPos"),yt=e(t=>lt(t)+rt,"calculateCommitPosition"),gt=e((t,r)=>{const e=et.get(t.branch);if(!e)throw new Error(`Branch not found for commit ${t.id}`);const o=e.pos,n=r+tt;return ot.set(t.id,{x:o,y:n}),{x:o,y:n}},"setCommitPosition"),pt=e((t,r,e)=>{const o=et.get(t.branch);if(!o)throw new Error(`Branch not found for commit ${t.id}`);const n=r+e,a=o.pos;ot.set(t.id,{x:a,y:n})},"setRootPosition"),xt=e((t,r,e,o,n,a)=>{if(a===w.HIGHLIGHT)t.append("rect").attr("x",e.x-10).attr("y",e.y-10).attr("width",20).attr("height",20).attr("class",`commit ${r.id} commit-highlight${n%8} ${o}-outer`),t.append("rect").attr("x",e.x-6).attr("y",e.y-6).attr("width",12).attr("height",12).attr("class",`commit ${r.id} commit${n%8} ${o}-inner`);else if(a===w.CHERRY_PICK)t.append("circle").attr("cx",e.x).attr("cy",e.y).attr("r",10).attr("class",`commit ${r.id} ${o}`),t.append("circle").attr("cx",e.x-3).attr("cy",e.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${o}`),t.append("circle").attr("cx",e.x+3).attr("cy",e.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${o}`),t.append("line").attr("x1",e.x+3).attr("y1",e.y+1).attr("x2",e.x).attr("y2",e.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${o}`),t.append("line").attr("x1",e.x-3).attr("y1",e.y+1).attr("x2",e.x).attr("y2",e.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${o}`);else{const s=t.append("circle");if(s.attr("cx",e.x),s.attr("cy",e.y),s.attr("r",r.type===w.MERGE?9:10),s.attr("class",`commit ${r.id} commit${n%8}`),a===w.MERGE){const a=t.append("circle");a.attr("cx",e.x),a.attr("cy",e.y),a.attr("r",6),a.attr("class",`commit ${o} ${r.id} commit${n%8}`)}a===w.REVERSE&&t.append("path").attr("d",`M ${e.x-5},${e.y-5}L${e.x+5},${e.y+5}M${e.x-5},${e.y+5}L${e.x+5},${e.y-5}`).attr("class",`commit ${o} ${r.id} commit${n%8}`)}},"drawCommitBullet"),ft=e((t,r,e,o)=>{if(r.type!==w.CHERRY_PICK&&(r.customId&&r.type===w.MERGE||r.type!==w.MERGE)&&Z?.showCommitLabel){const n=t.append("g"),a=n.insert("rect").attr("class","commit-label-bkg"),s=n.append("text").attr("x",o).attr("y",e.y+25).attr("class","commit-label").text(r.id),c=s.node()?.getBBox();if(c&&(a.attr("x",e.posWithOffset-c.width/2-2).attr("y",e.y+13.5).attr("width",c.width+4).attr("height",c.height+4),"TB"===ct||"BT"===ct?(a.attr("x",e.x-(c.width+16+5)).attr("y",e.y-12),s.attr("x",e.x-(c.width+16)).attr("y",e.y+c.height-12)):s.attr("x",e.posWithOffset-c.width/2),Z.rotateCommitLabel))if("TB"===ct||"BT"===ct)s.attr("transform","rotate(-45, "+e.x+", "+e.y+")"),a.attr("transform","rotate(-45, "+e.x+", "+e.y+")");else{const t=-7.5-(c.width+10)/25*9.5,r=10+c.width/25*8.5;n.attr("transform","translate("+t+", "+r+") rotate(-45, "+o+", "+e.y+")")}}},"drawCommitLabel"),ut=e((t,r,e,o)=>{if(r.tags.length>0){let n=0,a=0,s=0;const c=[];for(const o of r.tags.reverse()){const r=t.insert("polygon"),i=t.append("circle"),h=t.append("text").attr("y",e.y-16-n).attr("class","tag-label").text(o),d=h.node()?.getBBox();if(!d)throw new Error("Tag bbox not found");a=Math.max(a,d.width),s=Math.max(s,d.height),h.attr("x",e.posWithOffset-d.width/2),c.push({tag:h,hole:i,rect:r,yOffset:n}),n+=20}for(const{tag:t,hole:r,rect:i,yOffset:h}of c){const n=s/2,c=e.y-19.2-h;if(i.attr("class","tag-label-bkg").attr("points",`\n      ${o-a/2-2},${c+2}  \n      ${o-a/2-2},${c-2}\n      ${e.posWithOffset-a/2-4},${c-n-2}\n      ${e.posWithOffset+a/2+4},${c-n-2}\n      ${e.posWithOffset+a/2+4},${c+n+2}\n      ${e.posWithOffset-a/2-4},${c+n+2}`),r.attr("cy",c).attr("cx",o-a/2+2).attr("r",1.5).attr("class","tag-hole"),"TB"===ct||"BT"===ct){const s=o+h;i.attr("class","tag-label-bkg").attr("points",`\n        ${e.x},${s+2}\n        ${e.x},${s-2}\n        ${e.x+tt},${s-n-2}\n        ${e.x+tt+a+4},${s-n-2}\n        ${e.x+tt+a+4},${s+n+2}\n        ${e.x+tt},${s+n+2}`).attr("transform","translate(12,12) rotate(45, "+e.x+","+o+")"),r.attr("cx",e.x+2).attr("cy",s).attr("transform","translate(12,12) rotate(45, "+e.x+","+o+")"),t.attr("x",e.x+5).attr("y",s+3).attr("transform","translate(14,14) rotate(45, "+e.x+","+o+")")}}}},"drawCommitTags"),bt=e(t=>{switch(t.customType??t.type){case w.NORMAL:return"commit-normal";case w.REVERSE:return"commit-reverse";case w.HIGHLIGHT:return"commit-highlight";case w.MERGE:return"commit-merge";case w.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),wt=e((t,r,e,o)=>{const n={x:0,y:0};if(!(t.parents.length>0))return"TB"===r?30:"BT"===r?(o.get(t.id)??n).y-rt:0;{const e=dt(t.parents);if(e){const a=o.get(e)??n;return"TB"===r?a.y+rt:"BT"===r?(o.get(t.id)??n).y-rt:a.x+rt}}return 0},"calculatePosition"),Bt=e((t,r,e)=>{const o="BT"===ct&&e?r:r+tt,n="TB"===ct||"BT"===ct?o:et.get(t.branch)?.pos,a="TB"===ct||"BT"===ct?et.get(t.branch)?.pos:o;if(void 0===a||void 0===n)throw new Error(`Position were undefined for commit ${t.id}`);return{x:a,y:n,posWithOffset:o}},"getCommitPosition"),Et=e((t,r,o)=>{if(!Z)throw new Error("GitGraph config not found");const n=t.append("g").attr("class","commit-bullets"),a=t.append("g").attr("class","commit-labels");let s="TB"===ct||"BT"===ct?30:0;const c=[...r.keys()],i=Z?.parallelCommits??!1,h=e((t,e)=>{const o=r.get(t)?.seq,n=r.get(e)?.seq;return void 0!==o&&void 0!==n?o-n:0},"sortKeys");let d=c.sort(h);"BT"===ct&&(i&&$t(d,r,s),d=d.reverse()),d.forEach(t=>{const e=r.get(t);if(!e)throw new Error(`Commit not found for key ${t}`);i&&(s=wt(e,ct,s,ot));const c=Bt(e,s,i);if(o){const t=bt(e),r=e.customType??e.type,o=et.get(e.branch)?.index??0;xt(n,e,c,t,o,r),ft(a,e,c,s),ut(a,e,c,s)}"TB"===ct||"BT"===ct?ot.set(e.id,{x:c.x,y:c.posWithOffset}):ot.set(e.id,{x:c.posWithOffset,y:c.y}),s="BT"===ct&&i?s+rt:s+rt+tt,s>st&&(st=s)})},"drawCommits"),kt=e((t,r,o,n,a)=>{const s=("TB"===ct||"BT"===ct?o.x<n.x:o.y<n.y)?r.branch:t.branch,c=e(t=>t.branch===s,"isOnBranchToGetCurve"),i=e(e=>e.seq>t.seq&&e.seq<r.seq,"isBetweenCommits");return[...a.values()].some(t=>i(t)&&c(t))},"shouldRerouteArrow"),Ct=e((t,r,e=0)=>{const o=t+Math.abs(t-r)/2;if(e>5)return o;if(at.every(t=>Math.abs(t-o)>=10))return at.push(o),o;const n=Math.abs(t-r);return Ct(t,r-n/5,e+1)},"findLane"),Lt=e((t,r,e,o)=>{const n=ot.get(r.id),a=ot.get(e.id);if(void 0===n||void 0===a)throw new Error(`Commit positions not found for commits ${r.id} and ${e.id}`);const s=kt(r,e,n,a,o);let c,i="",h="",d=0,m=0,$=et.get(e.branch)?.index;if(e.type===w.MERGE&&r.id!==e.parents[0]&&($=et.get(r.branch)?.index),s){i="A 10 10, 0, 0, 0,",h="A 10 10, 0, 0, 1,",d=10,m=10;const t=n.y<a.y?Ct(n.y,a.y):Ct(a.y,n.y),e=n.x<a.x?Ct(n.x,a.x):Ct(a.x,n.x);"TB"===ct?n.x<a.x?c=`M ${n.x} ${n.y} L ${e-d} ${n.y} ${h} ${e} ${n.y+m} L ${e} ${a.y-d} ${i} ${e+m} ${a.y} L ${a.x} ${a.y}`:($=et.get(r.branch)?.index,c=`M ${n.x} ${n.y} L ${e+d} ${n.y} ${i} ${e} ${n.y+m} L ${e} ${a.y-d} ${h} ${e-m} ${a.y} L ${a.x} ${a.y}`):"BT"===ct?n.x<a.x?c=`M ${n.x} ${n.y} L ${e-d} ${n.y} ${i} ${e} ${n.y-m} L ${e} ${a.y+d} ${h} ${e+m} ${a.y} L ${a.x} ${a.y}`:($=et.get(r.branch)?.index,c=`M ${n.x} ${n.y} L ${e+d} ${n.y} ${h} ${e} ${n.y-m} L ${e} ${a.y+d} ${i} ${e-m} ${a.y} L ${a.x} ${a.y}`):n.y<a.y?c=`M ${n.x} ${n.y} L ${n.x} ${t-d} ${i} ${n.x+m} ${t} L ${a.x-d} ${t} ${h} ${a.x} ${t+m} L ${a.x} ${a.y}`:($=et.get(r.branch)?.index,c=`M ${n.x} ${n.y} L ${n.x} ${t+d} ${h} ${n.x+m} ${t} L ${a.x-d} ${t} ${i} ${a.x} ${t-m} L ${a.x} ${a.y}`)}else i="A 20 20, 0, 0, 0,",h="A 20 20, 0, 0, 1,",d=20,m=20,"TB"===ct?(n.x<a.x&&(c=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${n.x} ${n.y} L ${n.x} ${a.y-d} ${i} ${n.x+m} ${a.y} L ${a.x} ${a.y}`:`M ${n.x} ${n.y} L ${a.x-d} ${n.y} ${h} ${a.x} ${n.y+m} L ${a.x} ${a.y}`),n.x>a.x&&(i="A 20 20, 0, 0, 0,",h="A 20 20, 0, 0, 1,",d=20,m=20,c=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${n.x} ${n.y} L ${n.x} ${a.y-d} ${h} ${n.x-m} ${a.y} L ${a.x} ${a.y}`:`M ${n.x} ${n.y} L ${a.x+d} ${n.y} ${i} ${a.x} ${n.y+m} L ${a.x} ${a.y}`),n.x===a.x&&(c=`M ${n.x} ${n.y} L ${a.x} ${a.y}`)):"BT"===ct?(n.x<a.x&&(c=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${n.x} ${n.y} L ${n.x} ${a.y+d} ${h} ${n.x+m} ${a.y} L ${a.x} ${a.y}`:`M ${n.x} ${n.y} L ${a.x-d} ${n.y} ${i} ${a.x} ${n.y-m} L ${a.x} ${a.y}`),n.x>a.x&&(i="A 20 20, 0, 0, 0,",h="A 20 20, 0, 0, 1,",d=20,m=20,c=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${n.x} ${n.y} L ${n.x} ${a.y+d} ${i} ${n.x-m} ${a.y} L ${a.x} ${a.y}`:`M ${n.x} ${n.y} L ${a.x-d} ${n.y} ${i} ${a.x} ${n.y-m} L ${a.x} ${a.y}`),n.x===a.x&&(c=`M ${n.x} ${n.y} L ${a.x} ${a.y}`)):(n.y<a.y&&(c=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${n.x} ${n.y} L ${a.x-d} ${n.y} ${h} ${a.x} ${n.y+m} L ${a.x} ${a.y}`:`M ${n.x} ${n.y} L ${n.x} ${a.y-d} ${i} ${n.x+m} ${a.y} L ${a.x} ${a.y}`),n.y>a.y&&(c=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${n.x} ${n.y} L ${a.x-d} ${n.y} ${i} ${a.x} ${n.y-m} L ${a.x} ${a.y}`:`M ${n.x} ${n.y} L ${n.x} ${a.y+d} ${h} ${n.x+m} ${a.y} L ${a.x} ${a.y}`),n.y===a.y&&(c=`M ${n.x} ${n.y} L ${a.x} ${a.y}`));if(void 0===c)throw new Error("Line definition not found");t.append("path").attr("d",c).attr("class","arrow arrow"+$%8)},"drawArrow"),Tt=e((t,r)=>{const e=t.append("g").attr("class","commit-arrows");[...r.keys()].forEach(t=>{const o=r.get(t);o.parents&&o.parents.length>0&&o.parents.forEach(t=>{Lt(e,r.get(t),o,r)})})},"drawArrows"),Mt=e((t,r)=>{const e=t.append("g");r.forEach((t,r)=>{const o=r%8,n=et.get(t.name)?.pos;if(void 0===n)throw new Error(`Position not found for branch ${t.name}`);const a=e.append("line");a.attr("x1",0),a.attr("y1",n),a.attr("x2",st),a.attr("y2",n),a.attr("class","branch branch"+o),"TB"===ct?(a.attr("y1",30),a.attr("x1",n),a.attr("y2",st),a.attr("x2",n)):"BT"===ct&&(a.attr("y1",st),a.attr("x1",n),a.attr("y2",30),a.attr("x2",n)),at.push(n);const s=t.name,c=ht(s),i=e.insert("rect"),h=e.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+o);h.node().appendChild(c);const d=c.getBBox();i.attr("class","branchLabelBkg label"+o).attr("rx",4).attr("ry",4).attr("x",-d.width-4-(!0===Z?.rotateCommitLabel?30:0)).attr("y",-d.height/2+8).attr("width",d.width+18).attr("height",d.height+4),h.attr("transform","translate("+(-d.width-14-(!0===Z?.rotateCommitLabel?30:0))+", "+(n-d.height/2-1)+")"),"TB"===ct?(i.attr("x",n-d.width/2-10).attr("y",0),h.attr("transform","translate("+(n-d.width/2-5)+", 0)")):"BT"===ct?(i.attr("x",n-d.width/2-10).attr("y",st),h.attr("transform","translate("+(n-d.width/2-5)+", "+st+")")):i.attr("transform","translate(-19, "+(n-d.height/2)+")")})},"drawBranches"),vt=e(function(t,r,e,o,n){return et.set(t,{pos:r,index:e}),r+(50+(n?40:0)+("TB"===ct||"BT"===ct?o.width/2:0))},"setBranchPosition"),Pt={parser:X,db:W,renderer:{draw:e(function(t,r,e,o){if(it(),h.debug("in gitgraph renderer",t+"\n","id:",r,e),!Z)throw new Error("GitGraph config not found");const n=Z.rotateCommitLabel??!1,a=o.db;nt=a.getCommits();const s=a.getBranchesAsObjArray();ct=a.getDirection();const c=b(`[id="${r}"]`);let i=0;s.forEach((t,r)=>{const e=ht(t.name),o=c.append("g"),a=o.insert("g").attr("class","branchLabel"),s=a.insert("g").attr("class","label branch-label");s.node()?.appendChild(e);const h=e.getBBox();i=vt(t.name,i,r,h,n),s.remove(),a.remove(),o.remove()}),Et(c,nt,!1),Z.showBranches&&Mt(c,s),Tt(c,nt),Et(c,nt,!0),m.insertTitle(c,"gitTitleText",Z.titleTopMargin??0,a.getDiagramTitle()),$(void 0,c,Z.diagramPadding,Z.useMaxWidth)},"draw")},styles:e(t=>`\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ${[0,1,2,3,4,5,6,7].map(r=>`\n        .branch-label${r} { fill: ${t["gitBranchLabel"+r]}; }\n        .commit${r} { stroke: ${t["git"+r]}; fill: ${t["git"+r]}; }\n        .commit-highlight${r} { stroke: ${t["gitInv"+r]}; fill: ${t["gitInv"+r]}; }\n        .label${r}  { fill: ${t["git"+r]}; }\n        .arrow${r} { stroke: ${t["git"+r]}; }\n        `).join("\n")}\n\n  .branch {\n    stroke-width: 1;\n    stroke: ${t.lineColor};\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}\n  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }\n  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}\n  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }\n  .tag-hole { fill: ${t.textColor}; }\n\n  .commit-merge {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n  .commit-reverse {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${t.textColor};\n  }\n`,"getStyles")};export{Pt as diagram};
